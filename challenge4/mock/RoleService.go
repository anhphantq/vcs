// Code generated by MockGen. DO NOT EDIT.
// Source: challenge4/services (interfaces: RoleService)

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "challenge4/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRoleService is a mock of RoleService interface.
type MockRoleService struct {
	ctrl     *gomock.Controller
	recorder *MockRoleServiceMockRecorder
}

// MockRoleServiceMockRecorder is the mock recorder for MockRoleService.
type MockRoleServiceMockRecorder struct {
	mock *MockRoleService
}

// NewMockRoleService creates a new mock instance.
func NewMockRoleService(ctrl *gomock.Controller) *MockRoleService {
	mock := &MockRoleService{ctrl: ctrl}
	mock.recorder = &MockRoleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleService) EXPECT() *MockRoleServiceMockRecorder {
	return m.recorder
}

// DeleteRoleByID mocks base method.
func (m *MockRoleService) DeleteRoleByID(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleByID indicates an expected call of DeleteRoleByID.
func (mr *MockRoleServiceMockRecorder) DeleteRoleByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleByID", reflect.TypeOf((*MockRoleService)(nil).DeleteRoleByID), arg0)
}

// GetAllRole mocks base method.
func (m *MockRoleService) GetAllRole() ([]models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRole")
	ret0, _ := ret[0].([]models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRole indicates an expected call of GetAllRole.
func (mr *MockRoleServiceMockRecorder) GetAllRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRole", reflect.TypeOf((*MockRoleService)(nil).GetAllRole))
}

// GetRoleByID mocks base method.
func (m *MockRoleService) GetRoleByID(arg0 uint) (models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", arg0)
	ret0, _ := ret[0].(models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockRoleServiceMockRecorder) GetRoleByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockRoleService)(nil).GetRoleByID), arg0)
}

// InsertRole mocks base method.
func (m *MockRoleService) InsertRole(arg0 models.Role) (models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRole", arg0)
	ret0, _ := ret[0].(models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRole indicates an expected call of InsertRole.
func (mr *MockRoleServiceMockRecorder) InsertRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRole", reflect.TypeOf((*MockRoleService)(nil).InsertRole), arg0)
}
